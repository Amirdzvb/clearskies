#!/usr/bin/env ruby
#
# ClearSkies, a two-way synchronization program
#
#
# This is the command-line user-interface to the clearskies daemon.  It
# launches the daemon and can issue commands to it.

require_relative 'lib/control_client'
require_relative 'lib/conf'

# Parse command-line arguments.  We have subcommands, which themselves have
# their own set of options, as well as a few global options which we'll always
# interject.

command = ARGV.find { |arg| arg !~ /^-/ }

require 'optparse'
options = {}
OptionParser.new do |opts|
  if !command
    opts.banner = "Usage: clearskies [command] [args...]"
  else
    opts.banner = "Usage: clearskies #{command}"
  end

  extra_help = nil

  case command
  when nil
  when "start"
    extra_help = "
Start daemon in the background.  The daemon needs to be running in order for
files to sync to other devices.
"

    opts.on( '-F', '--no-fork', 'Do not start in background' ) do |f|
      options[:no_fork] = !f
    end

    opts.on( '--trackers TRACKER', 'HTTP addresses of trackers' ) do |t|
      Conf.trackers = t.split ','
    end

    # FIXME Instead of having to pass this at start time, let the user
    # reconfigure it dynamically via the CLI
    opts.on( '-p', '--listen-port NUMBER', 'Port for incoming connections' ) do |p|
      Conf.listen_port = p.to_i
    end

  when "stop"
    extra_help = "Cause background program to exit."

  when "restart"
    extra_help = "Restart background program."

  when "status"
    extra_help = "
Show detailed program status.

FIXME explain what status details mean here.
"

  when "logcat"
    extra_help = "Display the contents of the log and exit."

  when "logtail"
    extra_help = "Show new log messages until canceled."

  when "create"
    opts.banner += " [path]"
    extra_help = "Create share from existing directory."

  when "list"
    extra_help = "List all shares and sync status."

  when "share"
    opts.banner += " [path]"
    opts.on( '-m', '--mode', 'Share mode' )
    extra_help = "
Share existing directory with peer.  If the directory is not already a share,
it will be made one automatically.

--mode should be one of 'read-write', 'read-only', and 'untrusted'.  ('rw, 'ro',
'un' are also acceptable.)
"

  when "attach"
    opts.banner += " [code] [path]"
    extra_help = "
Add access code from someone else, creating new share at [path].  The code is a
string starting with SYNC.  If files already exist at path, they will be
overwritten.
"

  when "detach"
    opts.banner += " [path]"
    extra_help = "
Stop syncing path.  This does not delete any of the directory contents.
"
  end

  opts.on( "-h", "--help", "View this screen" ) do |h|
    puts opts
    puts extra_help if extra_help
    if !command
      puts "
  Daemon management:
    start                            Start background program
    stop                             Cause background program to exit
    restart                          Restart background program
    status                           Give program status
    logcat                           Display the contents of the log and exit
    logtail                          Show new log messages until canceled

  Share management:
    create [path]                    Create new share
    list                             List all shares and sync status
    share [path]                     Make access code to be given to others
    attach [code] [path]             Add access code from someone else,
                                     creating new share at [path]
    detach [path]                    Stop syncing path
"
    end
    exit
  end
end.parse!

command = ARGV.shift

if !command
  abort "No command given, try --help"
end

case command
when "start"
  require_relative 'lib/daemon'
  if options[:no_fork]
    Daemon.run
  else
    Daemon.daemonize
  end

when "stop"
  ControlClient.issue :stop

when "restart"
  ControlClient.issue :stop
  Daemon.start

when "logcat"
  logfile = Conf.path 'log'
  exec "cat #{logfile}"

when "logtail"
  logfile = Conf.path 'log'
  exec "tail -f #{logfile}"

when "pause"
  ControlClient.issue "pause"

when "resume", "unpause"
  ControlClient.issue "resume"

when "status", "st", "stat"
  res = ControlClient.issue :status
  p res

when "create"
  path = ARGV.shift

  unless File.exists?(path)
    abort "No such path: #{path.inspect}"
  end

  path = File.realpath path

  ControlClient.issue :create_share, path

when "ls", "list"
  res = ControlClient.issue :list_shares
  puts "Path                  Status"
  res[:shares].each do |share|
    puts "#{share[:path]} #{share[:status]}"
  end

when "share"
  path = ARGV.shift
  abort "Path expected, see --help" if !path

  mode_input = options[:mode] || "rw"

  modes = {
    "rw" => "read_write",
    "read-write" => "read_write",
    "read_write" => "read_write",
    "ro" => "read_only",
    "read-only" => "read_only",
    "read_only" => "read_only",
    "un" => "untrusted",
    "untrusted" => "untrusted",
  }

  mode = modes[mode_input.downcase]

  if mode.nil?
    abort "No such mode: #{mode_input.inspect}"
  end

  unless File.exists?(path)
    abort "No such path: #{path.inspect}"
  end

  path = File.realpath(path)

  res = ControlClient.issue :create_access_code, {
    path: path,
    mode: mode,
  }

  puts res[:access_code]

when "attach", "add"
  code = ARGV.shift
  path = ARGV.shift

  p path
  FileUtils.mkdir_p path
  path = File.realpath(path)

  ControlClient.issue :add_share, {
    code: code,
    path: path
  }

when "detach", "rm"
  path = ARGV.shift

  unless File.exists?(path)
    abort "No such path: #{path.inspect}"
  end
  path = File.realpath(path)

  ControlClient.issue :remove_share, path

else
  abort "Invalid command: #{command.inspect}, try --help"

end
