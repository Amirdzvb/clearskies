#!/usr/bin/env ruby
#
# ClearSkies, a two-way synchronization program
#
#
# This is the command-line user-interface to the clearskies daemon.  It
# launches the daemon and can issue commands to it.

# Find libraries
dir = File.dirname( $0 ) + "/lib"
dir = File.realpath dir # make it absolute
if File.exists?( "#{dir}/permahash.rb" )
  $: << dir
else
  abort "Cannot find lib directory"
end

require 'daemon'
require 'control_client'
require 'conf'

# Parse command-line arguments
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: clearskies [command]"

  opts.on( "-v", "--verbose", "Output informational messages" ) do |v|
    options[:verbose] = v
  end

  opts.on( "--config", "Configuration file" ) do |c|
    options[:config] = c
  end

  opts.on( "--local-port", "Local control port" ) do |l|
    options[:local_port] = l
  end

  opts.on( "--version", "Get software version" ) do |v|
    puts "ClearSkies cli version 0"
    puts "Daemon is version #{ControlClient.issue(:version)}"
    exit 0
  end

  opts.on( "-h", "--help" ) do |h|
    puts opts
    puts "
Daemon management:
  start                   Start background program
  stop                    Cause background program to exit
  restart                 Restart background program
  status                  Show program status
  logcat                  Cats the output of the log and exits
  logtail                 Follows the log until user intervenes

Share management:
  create [path]           Create new share
  list                    List all shares and sync status
  share [path] [mode]     Make access code to be given to someone else
                          mode is one of (rw, ro, untrusted)
  attach [code] [path]   Add access code from someone else, creating new share at [path]
  detach [path]       Stop syncing path
"
    exit
  end
end.parse!

command = ARGV.shift

if !command
  abort "No command given, try --help"
end

case command
when "start"
  Daemon.daemonize

when "debug"
  # FIXME this is temporary until better argument parsing makes it possible to
  # start it without forking
  Daemon.run

when "stop"
  ControlClient.issue :stop

when "restart"
  ControlClient.issue :stop
  Daemon.start

when "logcat"
  logfile = Conf.path('log')
  exec "cat #{logfile}"

when "logtail"
  logfile = Conf.path('log')
  exec "tail -f #{logfile}"

when "pause"
  ControlClient.issue "pause"

when "resume", "unpause"
  ControlClient.issue "resume"

when "status", "st", "stat"
  res = ControlClient.issue :status
  p res

when "create"
  path = ARGV.shift

  path = File.realpath(path)

  ControlClient.issue :create_share, path

when "ls", "list"
  res = ControlClient.issue :list_shares
  puts "Path                  Status"
  res[:shares].each do |share|
    puts "#{share[:path]} #{share[:status]}"
  end

when "share"
  path = ARGV.shift
  mode_input = ARGV.shift

  modes = {
    "rw" => "read_write",
    "read-write" => "read_write",
    "read_write" => "read_write",
    "ro" => "read_only",
    "read-only" => "read_only",
    "read_only" => "read_only",
    "untrusted" => "untrusted",
  }

  mode = modes[mode_input.downcase]

  path = File.realpath(path)

  res = ControlClient.issue :create_access_code, {
    path: path,
    mode: mode,
  }

  puts res[:access_code]

when "attach", "add"
  code = ARGV.shift
  path = ARGV.shift

  FileUtils.mkdir_p path
  path = File.realpath(path)

  ControlClient.issue :add_share, {
    code: code,
    path: path
  }

when "detach", "rm"
  path = ARGV.shift

  path = File.realpath(path)

  ControlClient.issue :remove_share, path

else
  abort "Invalid command: #{command.inspect}"
end
