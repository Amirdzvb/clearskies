#!/usr/bin/env ruby
# Sample ClearSkies tracker server

require 'json'
require 'webrick'

server = WEBrick::HTTPServer.new({
  :Port => ENV['PORT'] || 10234,
})

server.listeners.each do |socket|
  socket.setsockopt Socket::SOL_SOCKET, Socket::SO_REUSEADDR, true
end

trap('INT'){ server.shutdown }
trap('TERM'){ server.shutdown }

server.mount_proc '/' do |req,res|
  res.body = "This is the example ClearSkies tracker server\n"
end

class Tracker < WEBrick::HTTPServlet::AbstractServlet
  @@peers = {}

  TIMEOUT = 30

  def do_GET req, res
    q = req.query

    # FIXME support IPv6
    addr = req.remote_ip.to_s
    port = q["tcp_port"]

    ids = q["id"].list

    # FIXME Validate incoming parameters

    others = {}

    ids.each do |foo|
      id, peer = foo.split "@"

      @@peers[id] ||= {}

      now = Time.new.to_i
      @@peers[id][peer] = [ addr, port, now ]

      peers = []

      @@peers[id].each do |peer_id,info|
        next if peer_id == peer
        next if info[2] + TIMEOUT < now
        peers.push "#{peer_id}@tcp:#{info[0]}:#{info[1]}"
      end

      next if peers.empty?
      others[id] = peers
    end

    res.content_type = 'application/json'
    res.body = {
      your_ip: addr,
      others: others,
      ttl: TIMEOUT
    }.to_json
  end
end

server.mount '/clearskies/track', Tracker

if ENV['PIDFILE']
  File.open ENV['PIDFILE'], 'w' do |f|
    f.puts $$
  end
end

server.start
