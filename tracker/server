#!/usr/bin/env ruby
# Sample ClearSkies tracker server

require 'json'
require 'webrick'

server = WEBrick::HTTPServer.new({
  :Port => ENV['PORT'] || 10234,
})

server.listeners.each do |socket|
  socket.setsockopt Socket::SOL_SOCKET, Socket::SO_REUSEADDR, true
end

trap('INT'){ server.shutdown }
trap('TERM'){ server.shutdown }

server.mount_proc '/' do |req,res|
  res.body = "This is the example ClearSkies tracker server\n"
end

TIMEOUT = 30

class PeerList
  def initialize
    @peers = {}
  end

  def add id, peer, proto, addr, port
    @peers[id] ||= []
    @peers[id] << [peer, proto, addr, port, Time.new + TIMEOUT]
  end

  def get id
    return [] unless @peers[id]
    @peers[id].delete_if { |_| _[4] < Time.new }
    @peers[id]
  end
end

class Tracker < WEBrick::HTTPServlet::AbstractServlet
  @@peers = PeerList.new

  def do_GET req, res
    q = req.query

    addr = req.remote_ip.to_s
    addr = "[#{addr}]" if addr =~ /:/ # IPv6

    ids = q["id"].list

    # FIXME Validate incoming parameters

    others = {}

    now = Time.new.to_i

    ids.each do |foo|
      id, peer = foo.split "@"

      ['tcp', 'utp'].each do |proto|
        field = "#{proto}_port"
        next unless q[field]
        port_number = q[field].to_i
        next unless (1..65535) === port_number

        @@peers.add id, peer, proto, addr, port_number
      end

      peers = []

      @@peers.get(id).each do |info|
        peer_id, peer_proto, peer_addr, peer_port = info
        next if peer_id == peer
        peers.push "#{peer_id}@#{peer_proto}:#{peer_addr}:#{peer_port}"
      end

      next if peers.empty?
      others[id] = peers
    end

    res.content_type = 'application/json'
    res.body = {
      your_ip: addr,
      others: others,
      ttl: TIMEOUT
    }.to_json
  end
end

server.mount '/clearskies/track', Tracker

if ENV['PIDFILE']
  File.open ENV['PIDFILE'], 'w' do |f|
    f.puts $$
  end
end

server.start
