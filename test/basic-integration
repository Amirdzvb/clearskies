#!/bin/bash

if [ -z "$TMUX" ]
then
  exec tmux new-session $0
fi

kill_pid()
{
  if test -e "$1"
  then
    kill `cat "$1"` 2>/dev/null
  fi
}

cleanup()
{
  kill_pid /tmp/1/pid
  kill_pid /tmp/2/pid

  sleep 0.1
  kill_pid "/tmp/testing/Client"
  kill_pid "/tmp/testing/Server"

  rm -rf /tmp/1 /tmp/2 /tmp/testing
}

error() {
  echo "$@"
  read foo
  cleanup
  exit -1
}

ctrl_c()
{
  cleanup
  exit 1
}

run_program()
{
  mkdir -p /tmp/testing
  tempfile=/tmp/testing/`echo "$1" | tr ' ' '-'`

  tmux split-window -v "($2; read foo) & echo \$! > $tempfile; wait \$!"
  tmux select-layout even-vertical
  tmux select-pane -t 0
}

wait_file()
{
  echo "Waiting for '$2' in $1"
  while ! test -e /tmp/$1/stuff/$2
  do
    sleep 0.1
  done
}

metadata()
{
  stat $1 | egrep -v '^\ *(File:|Device:|Access: 2|Change:)'
}

verify_synced()
{
  wait_file 1 $1
  wait_file 2 $1
  if ! cmp /tmp/{1,2}/stuff/$1
  then
    error "$1 doesn't match"
  fi

  if ! diff -u <(metadata /tmp/1/stuff/$1) <(metadata /tmp/2/stuff/$1)
  then
    error "metadata for '$1' doesn't match"
  fi
}

wait_gone()
{
  echo "Waiting for $1 to be deleted"
  while test -e "$1"
  do
    sleep 0.1
  done
}


trap ctrl_c SIGINT

cleanup

mkdir -p /tmp/1/stuff
echo my first file > /tmp/1/stuff/first
echo my second file > /tmp/1/stuff/second
echo my read-only file > /tmp/1/stuff/read-only
chmod 400 /tmp/1/stuff/read-only

# I call the two Daemons Server and Client just for internal mental reference

# ----- Server -----

run_program "Server" "CLEARSKIES_DIR=/tmp/1 ./clearskies debug"

echo "Waiting for server to start"
while ! test -e /tmp/1/control
do
  sleep 0.1
done

echo "Creating share on server"
echo "Requesting access code from server"
code=$(CLEARSKIES_DIR=/tmp/1 ./clearskies share /tmp/1/stuff read_write)
echo "Code is '$code'"

# ----- Client -----

run_program "Client" "CLEARSKIES_DIR=/tmp/2 ./clearskies debug"

echo "Waiting for client to start"
while ! test -e /tmp/2/control
do
  sleep 0.1
done

tmux select-pane -t 0

echo "Adding access code to client"
CLEARSKIES_DIR=/tmp/2 ./clearskies add "$code" /tmp/2/stuff

# ----- Initial Sync ------

verify_synced first
verify_synced second
verify_synced read-only

# ----- Change a file -----

echo "Changing first"
echo "This is still the first file" > /tmp/1/stuff/first

# ----- Create files on client -----

echo "Creating third and fourth"
echo "A wild file appears!" > /tmp/2/stuff/third
echo "with a friend" > /tmp/2/stuff/fourth

verify_synced third
verify_synced fourth

# ----- Detect metadata change -----
echo "Changing mode of first"
chmod 600 /tmp/2/stuff/first
echo "Creating first-helper"
touch /tmp/2/stuff/first-helper
verify_synced first-helper
verify_synced first

# ----- Delete a file -----

echo "Removing fourth"
rm /tmp/1/stuff/fourth

wait_gone /tmp/2/stuff/fourth

# ----- Create subdirectory -----

# Test that directory contents are added even if the monitor
# is not in place by the time they are created
kill -STOP `cat /tmp/1/pid`
echo "Making subdir/five"
mkdir /tmp/1/stuff/subdir
echo "Five files for me" > /tmp/1/stuff/subdir/five
kill -CONT `cat /tmp/1/pid`

verify_synced subdir/five

# Also verify that files that appear afterward are detected

echo "Creating subdir/six"
echo "Now six, six files" > /tmp/1/stuff/subdir/six
verify_synced subdir/six

echo "Test successful!"

read foo

cleanup

exit 0
